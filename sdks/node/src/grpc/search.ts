// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: search.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Chunk, RelevantChunk } from "./chunks";
import { Struct } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "redactive.grpc.v2";

export interface Query {
  /** Search query for semantic content */
  semanticQuery?:
    | string
    | undefined;
  /** Specific keywords to search for in source document */
  keywordQuery?: string | undefined;
}

export interface TimeSpan {
  after?: Date | undefined;
  before?: Date | undefined;
}

export interface Filters {
  /**
   * Scope of the query. This may either be the name of a fetcher, or a subspace of documents.
   * Subspaces take the form of <provider>://<tenancy>/<path>
   * e.g. for Confluence: 'confluence://redactiveai.atlassian.net/Engineering/Engineering Onboarding Guide'
   * for Sharepoint: 'sharepoint://redactiveai.sharepoint.com/Shared Documents/Engineering/Onboarding Guide.pdf'
   */
  scope: string[];
  /** Timespan of response chunk's creation */
  created?:
    | TimeSpan
    | undefined;
  /** Timespan of response chunk's last modification */
  modified?:
    | TimeSpan
    | undefined;
  /** List of user emails associated with response chunk */
  userEmails: string[];
  /** Include content from documents in trash */
  includeContentInTrash?: boolean | undefined;
}

export interface SearchChunksRequest {
  /** How many results to try to return (maximum number of results) */
  count?:
    | number
    | undefined;
  /** The query to execute */
  query:
    | Query
    | undefined;
  /** Filters to apply to query */
  filters?: Filters | undefined;
}

export interface GetDocumentRequest {
  /** A reference to the document to retrieve */
  ref: string;
  /** Query filters (only really for GetDocByTitle) */
  filters?: Filters | undefined;
}

export interface SearchChunksResponse {
  /** Query was successful */
  success: boolean;
  /** Error message if query failed */
  error?:
    | { [key: string]: any }
    | undefined;
  /** List of relevant chunks */
  relevantChunks: RelevantChunk[];
  /** List of providers used for query */
  providersUsed: string[];
}

export interface GetDocumentResponse {
  /** Query was successful */
  success: boolean;
  /** Error message if query failed */
  error?:
    | { [key: string]: any }
    | undefined;
  /** List of relevant chunks */
  chunks: Chunk[];
  /** List of providers used for query */
  providersUsed: string[];
}

function createBaseQuery(): Query {
  return { semanticQuery: undefined, keywordQuery: undefined };
}

export const Query: MessageFns<Query> = {
  encode(message: Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.semanticQuery !== undefined) {
      writer.uint32(10).string(message.semanticQuery);
    }
    if (message.keywordQuery !== undefined) {
      writer.uint32(18).string(message.keywordQuery);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.semanticQuery = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keywordQuery = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return {
      semanticQuery: isSet(object.semanticQuery) ? globalThis.String(object.semanticQuery) : undefined,
      keywordQuery: isSet(object.keywordQuery) ? globalThis.String(object.keywordQuery) : undefined,
    };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.semanticQuery !== undefined) {
      obj.semanticQuery = message.semanticQuery;
    }
    if (message.keywordQuery !== undefined) {
      obj.keywordQuery = message.keywordQuery;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Query>, I>>(base?: I): Query {
    return Query.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Query>, I>>(object: I): Query {
    const message = createBaseQuery();
    message.semanticQuery = object.semanticQuery ?? undefined;
    message.keywordQuery = object.keywordQuery ?? undefined;
    return message;
  },
};

function createBaseTimeSpan(): TimeSpan {
  return { after: undefined, before: undefined };
}

export const TimeSpan: MessageFns<TimeSpan> = {
  encode(message: TimeSpan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.after !== undefined) {
      Timestamp.encode(toTimestamp(message.after), writer.uint32(10).fork()).join();
    }
    if (message.before !== undefined) {
      Timestamp.encode(toTimestamp(message.before), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSpan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSpan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.after = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.before = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSpan {
    return {
      after: isSet(object.after) ? fromJsonTimestamp(object.after) : undefined,
      before: isSet(object.before) ? fromJsonTimestamp(object.before) : undefined,
    };
  },

  toJSON(message: TimeSpan): unknown {
    const obj: any = {};
    if (message.after !== undefined) {
      obj.after = message.after.toISOString();
    }
    if (message.before !== undefined) {
      obj.before = message.before.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimeSpan>, I>>(base?: I): TimeSpan {
    return TimeSpan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimeSpan>, I>>(object: I): TimeSpan {
    const message = createBaseTimeSpan();
    message.after = object.after ?? undefined;
    message.before = object.before ?? undefined;
    return message;
  },
};

function createBaseFilters(): Filters {
  return { scope: [], created: undefined, modified: undefined, userEmails: [], includeContentInTrash: undefined };
}

export const Filters: MessageFns<Filters> = {
  encode(message: Filters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scope) {
      writer.uint32(10).string(v!);
    }
    if (message.created !== undefined) {
      TimeSpan.encode(message.created, writer.uint32(18).fork()).join();
    }
    if (message.modified !== undefined) {
      TimeSpan.encode(message.modified, writer.uint32(26).fork()).join();
    }
    for (const v of message.userEmails) {
      writer.uint32(34).string(v!);
    }
    if (message.includeContentInTrash !== undefined) {
      writer.uint32(40).bool(message.includeContentInTrash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scope.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.created = TimeSpan.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.modified = TimeSpan.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userEmails.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.includeContentInTrash = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filters {
    return {
      scope: globalThis.Array.isArray(object?.scope) ? object.scope.map((e: any) => globalThis.String(e)) : [],
      created: isSet(object.created) ? TimeSpan.fromJSON(object.created) : undefined,
      modified: isSet(object.modified) ? TimeSpan.fromJSON(object.modified) : undefined,
      userEmails: globalThis.Array.isArray(object?.userEmails)
        ? object.userEmails.map((e: any) => globalThis.String(e))
        : [],
      includeContentInTrash: isSet(object.includeContentInTrash)
        ? globalThis.Boolean(object.includeContentInTrash)
        : undefined,
    };
  },

  toJSON(message: Filters): unknown {
    const obj: any = {};
    if (message.scope?.length) {
      obj.scope = message.scope;
    }
    if (message.created !== undefined) {
      obj.created = TimeSpan.toJSON(message.created);
    }
    if (message.modified !== undefined) {
      obj.modified = TimeSpan.toJSON(message.modified);
    }
    if (message.userEmails?.length) {
      obj.userEmails = message.userEmails;
    }
    if (message.includeContentInTrash !== undefined) {
      obj.includeContentInTrash = message.includeContentInTrash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filters>, I>>(base?: I): Filters {
    return Filters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filters>, I>>(object: I): Filters {
    const message = createBaseFilters();
    message.scope = object.scope?.map((e) => e) || [];
    message.created = (object.created !== undefined && object.created !== null)
      ? TimeSpan.fromPartial(object.created)
      : undefined;
    message.modified = (object.modified !== undefined && object.modified !== null)
      ? TimeSpan.fromPartial(object.modified)
      : undefined;
    message.userEmails = object.userEmails?.map((e) => e) || [];
    message.includeContentInTrash = object.includeContentInTrash ?? undefined;
    return message;
  },
};

function createBaseSearchChunksRequest(): SearchChunksRequest {
  return { count: undefined, query: undefined, filters: undefined };
}

export const SearchChunksRequest: MessageFns<SearchChunksRequest> = {
  encode(message: SearchChunksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== undefined) {
      writer.uint32(8).uint32(message.count);
    }
    if (message.query !== undefined) {
      Query.encode(message.query, writer.uint32(18).fork()).join();
    }
    if (message.filters !== undefined) {
      Filters.encode(message.filters, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChunksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChunksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.query = Query.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters = Filters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChunksRequest {
    return {
      count: isSet(object.count) ? globalThis.Number(object.count) : undefined,
      query: isSet(object.query) ? Query.fromJSON(object.query) : undefined,
      filters: isSet(object.filters) ? Filters.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: SearchChunksRequest): unknown {
    const obj: any = {};
    if (message.count !== undefined) {
      obj.count = Math.round(message.count);
    }
    if (message.query !== undefined) {
      obj.query = Query.toJSON(message.query);
    }
    if (message.filters !== undefined) {
      obj.filters = Filters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchChunksRequest>, I>>(base?: I): SearchChunksRequest {
    return SearchChunksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchChunksRequest>, I>>(object: I): SearchChunksRequest {
    const message = createBaseSearchChunksRequest();
    message.count = object.count ?? undefined;
    message.query = (object.query !== undefined && object.query !== null) ? Query.fromPartial(object.query) : undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Filters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseGetDocumentRequest(): GetDocumentRequest {
  return { ref: "", filters: undefined };
}

export const GetDocumentRequest: MessageFns<GetDocumentRequest> = {
  encode(message: GetDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ref !== "") {
      writer.uint32(10).string(message.ref);
    }
    if (message.filters !== undefined) {
      Filters.encode(message.filters, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ref = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filters = Filters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentRequest {
    return {
      ref: isSet(object.ref) ? globalThis.String(object.ref) : "",
      filters: isSet(object.filters) ? Filters.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: GetDocumentRequest): unknown {
    const obj: any = {};
    if (message.ref !== "") {
      obj.ref = message.ref;
    }
    if (message.filters !== undefined) {
      obj.filters = Filters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDocumentRequest>, I>>(base?: I): GetDocumentRequest {
    return GetDocumentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDocumentRequest>, I>>(object: I): GetDocumentRequest {
    const message = createBaseGetDocumentRequest();
    message.ref = object.ref ?? "";
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Filters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseSearchChunksResponse(): SearchChunksResponse {
  return { success: false, error: undefined, relevantChunks: [], providersUsed: [] };
}

export const SearchChunksResponse: MessageFns<SearchChunksResponse> = {
  encode(message: SearchChunksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== undefined) {
      Struct.encode(Struct.wrap(message.error), writer.uint32(18).fork()).join();
    }
    for (const v of message.relevantChunks) {
      RelevantChunk.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.providersUsed) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChunksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChunksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relevantChunks.push(RelevantChunk.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.providersUsed.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChunksResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isObject(object.error) ? object.error : undefined,
      relevantChunks: globalThis.Array.isArray(object?.relevantChunks)
        ? object.relevantChunks.map((e: any) => RelevantChunk.fromJSON(e))
        : [],
      providersUsed: globalThis.Array.isArray(object?.providersUsed)
        ? object.providersUsed.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SearchChunksResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.relevantChunks?.length) {
      obj.relevantChunks = message.relevantChunks.map((e) => RelevantChunk.toJSON(e));
    }
    if (message.providersUsed?.length) {
      obj.providersUsed = message.providersUsed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchChunksResponse>, I>>(base?: I): SearchChunksResponse {
    return SearchChunksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchChunksResponse>, I>>(object: I): SearchChunksResponse {
    const message = createBaseSearchChunksResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? undefined;
    message.relevantChunks = object.relevantChunks?.map((e) => RelevantChunk.fromPartial(e)) || [];
    message.providersUsed = object.providersUsed?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetDocumentResponse(): GetDocumentResponse {
  return { success: false, error: undefined, chunks: [], providersUsed: [] };
}

export const GetDocumentResponse: MessageFns<GetDocumentResponse> = {
  encode(message: GetDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== undefined) {
      Struct.encode(Struct.wrap(message.error), writer.uint32(18).fork()).join();
    }
    for (const v of message.chunks) {
      Chunk.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.providersUsed) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chunks.push(Chunk.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.providersUsed.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isObject(object.error) ? object.error : undefined,
      chunks: globalThis.Array.isArray(object?.chunks) ? object.chunks.map((e: any) => Chunk.fromJSON(e)) : [],
      providersUsed: globalThis.Array.isArray(object?.providersUsed)
        ? object.providersUsed.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetDocumentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.chunks?.length) {
      obj.chunks = message.chunks.map((e) => Chunk.toJSON(e));
    }
    if (message.providersUsed?.length) {
      obj.providersUsed = message.providersUsed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDocumentResponse>, I>>(base?: I): GetDocumentResponse {
    return GetDocumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDocumentResponse>, I>>(object: I): GetDocumentResponse {
    const message = createBaseGetDocumentResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? undefined;
    message.chunks = object.chunks?.map((e) => Chunk.fromPartial(e)) || [];
    message.providersUsed = object.providersUsed?.map((e) => e) || [];
    return message;
  },
};

export type SearchService = typeof SearchService;
export const SearchService = {
  /** Query the index for relevant chunks */
  searchChunks: {
    path: "/redactive.grpc.v2.Search/SearchChunks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchChunksRequest) => Buffer.from(SearchChunksRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchChunksRequest.decode(value),
    responseSerialize: (value: SearchChunksResponse) => Buffer.from(SearchChunksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SearchChunksResponse.decode(value),
  },
  /** Query the index for all chunks of a specific document */
  getDocument: {
    path: "/redactive.grpc.v2.Search/GetDocument",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetDocumentRequest) => Buffer.from(GetDocumentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetDocumentRequest.decode(value),
    responseSerialize: (value: GetDocumentResponse) => Buffer.from(GetDocumentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetDocumentResponse.decode(value),
  },
} as const;

export interface SearchServer extends UntypedServiceImplementation {
  /** Query the index for relevant chunks */
  searchChunks: handleUnaryCall<SearchChunksRequest, SearchChunksResponse>;
  /** Query the index for all chunks of a specific document */
  getDocument: handleUnaryCall<GetDocumentRequest, GetDocumentResponse>;
}

export interface SearchClient extends Client {
  /** Query the index for relevant chunks */
  searchChunks(
    request: SearchChunksRequest,
    callback: (error: ServiceError | null, response: SearchChunksResponse) => void,
  ): ClientUnaryCall;
  searchChunks(
    request: SearchChunksRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchChunksResponse) => void,
  ): ClientUnaryCall;
  searchChunks(
    request: SearchChunksRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchChunksResponse) => void,
  ): ClientUnaryCall;
  /** Query the index for all chunks of a specific document */
  getDocument(
    request: GetDocumentRequest,
    callback: (error: ServiceError | null, response: GetDocumentResponse) => void,
  ): ClientUnaryCall;
  getDocument(
    request: GetDocumentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetDocumentResponse) => void,
  ): ClientUnaryCall;
  getDocument(
    request: GetDocumentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetDocumentResponse) => void,
  ): ClientUnaryCall;
}

export const SearchClient = makeGenericClientConstructor(SearchService, "redactive.grpc.v2.Search") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SearchClient;
  service: typeof SearchService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
