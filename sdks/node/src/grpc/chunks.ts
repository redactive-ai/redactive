// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: chunks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "redactive.grpc.v2";

export interface ChunkMetadata {
  /** Chunk content's creation timestamp */
  createdAt?:
    | Date
    | undefined;
  /** Chunk content's last modified timestamp */
  modifiedAt?: Date | undefined;
  link?: string | undefined;
}

export interface SourceReference {
  /** Source system of the document e.g. confluence, sharepoint */
  system: string;
  /** Version of the source system e.g. 1.0.0 */
  systemVersion: string;
  /** Connection id to the source system e.g. confluence space id, sharepoint drive id */
  connectionId: string;
  /** Document id in the source system e.g. confluence page id, sharepoint file id */
  documentId: string;
  /** Document version in the source system e.g. confluence page version, sharepoint file hash */
  documentVersion: string;
  /**
   * Document path in the source system e.g. "redactiveai.atlassian.net/Engineering/Onboarding Guide"
   * or "redactiveai.sharepoint.com/Shared Documents/Engineering/Onboarding Guide.pdf"
   */
  documentPath?:
    | string
    | undefined;
  /** Document name in the source system e.g. "document.txt" */
  documentName?: string | undefined;
}

export interface ChunkReference {
  /** Chunking version e.g. 1.0.0 */
  chunkingVersion: string;
  /** chunk id is unique within the document, but not globally unique. */
  chunkId: string;
  /** SHA256 hash of the chunk body */
  chunkHash: string;
}

/** A chunk is a part of a document */
export interface RelevantChunk {
  /** Source reference of the document */
  source:
    | SourceReference
    | undefined;
  /** Chunk reference of the chunk */
  chunk:
    | ChunkReference
    | undefined;
  /** Relevance of the chunk */
  relevance:
    | RelevantChunk_Relevance
    | undefined;
  /** Chunk body */
  chunkBody: string;
  /** Document metadata */
  documentMetadata: ChunkMetadata | undefined;
}

export interface RelevantChunk_Relevance {
  /** Similarity score of the chunk */
  similarityScore: number;
}

/** A chunk is a part of a document */
export interface Chunk {
  /** Source reference of the document */
  source:
    | SourceReference
    | undefined;
  /** Chunk reference of the chunk */
  chunk:
    | ChunkReference
    | undefined;
  /** Chunk body */
  chunkBody: string;
  /** Document metadata */
  documentMetadata: ChunkMetadata | undefined;
}

function createBaseChunkMetadata(): ChunkMetadata {
  return { createdAt: undefined, modifiedAt: undefined, link: undefined };
}

export const ChunkMetadata: MessageFns<ChunkMetadata> = {
  encode(message: ChunkMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(10).fork()).join();
    }
    if (message.modifiedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.modifiedAt), writer.uint32(18).fork()).join();
    }
    if (message.link !== undefined) {
      writer.uint32(26).string(message.link);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChunkMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunkMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.modifiedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.link = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChunkMetadata {
    return {
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      modifiedAt: isSet(object.modifiedAt) ? fromJsonTimestamp(object.modifiedAt) : undefined,
      link: isSet(object.link) ? globalThis.String(object.link) : undefined,
    };
  },

  toJSON(message: ChunkMetadata): unknown {
    const obj: any = {};
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.modifiedAt !== undefined) {
      obj.modifiedAt = message.modifiedAt.toISOString();
    }
    if (message.link !== undefined) {
      obj.link = message.link;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChunkMetadata>, I>>(base?: I): ChunkMetadata {
    return ChunkMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChunkMetadata>, I>>(object: I): ChunkMetadata {
    const message = createBaseChunkMetadata();
    message.createdAt = object.createdAt ?? undefined;
    message.modifiedAt = object.modifiedAt ?? undefined;
    message.link = object.link ?? undefined;
    return message;
  },
};

function createBaseSourceReference(): SourceReference {
  return {
    system: "",
    systemVersion: "",
    connectionId: "",
    documentId: "",
    documentVersion: "",
    documentPath: undefined,
    documentName: undefined,
  };
}

export const SourceReference: MessageFns<SourceReference> = {
  encode(message: SourceReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.system !== "") {
      writer.uint32(10).string(message.system);
    }
    if (message.systemVersion !== "") {
      writer.uint32(18).string(message.systemVersion);
    }
    if (message.connectionId !== "") {
      writer.uint32(26).string(message.connectionId);
    }
    if (message.documentId !== "") {
      writer.uint32(34).string(message.documentId);
    }
    if (message.documentVersion !== "") {
      writer.uint32(42).string(message.documentVersion);
    }
    if (message.documentPath !== undefined) {
      writer.uint32(50).string(message.documentPath);
    }
    if (message.documentName !== undefined) {
      writer.uint32(58).string(message.documentName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.system = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.systemVersion = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.documentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.documentVersion = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.documentPath = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.documentName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceReference {
    return {
      system: isSet(object.system) ? globalThis.String(object.system) : "",
      systemVersion: isSet(object.systemVersion) ? globalThis.String(object.systemVersion) : "",
      connectionId: isSet(object.connectionId) ? globalThis.String(object.connectionId) : "",
      documentId: isSet(object.documentId) ? globalThis.String(object.documentId) : "",
      documentVersion: isSet(object.documentVersion) ? globalThis.String(object.documentVersion) : "",
      documentPath: isSet(object.documentPath) ? globalThis.String(object.documentPath) : undefined,
      documentName: isSet(object.documentName) ? globalThis.String(object.documentName) : undefined,
    };
  },

  toJSON(message: SourceReference): unknown {
    const obj: any = {};
    if (message.system !== "") {
      obj.system = message.system;
    }
    if (message.systemVersion !== "") {
      obj.systemVersion = message.systemVersion;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.documentId !== "") {
      obj.documentId = message.documentId;
    }
    if (message.documentVersion !== "") {
      obj.documentVersion = message.documentVersion;
    }
    if (message.documentPath !== undefined) {
      obj.documentPath = message.documentPath;
    }
    if (message.documentName !== undefined) {
      obj.documentName = message.documentName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceReference>, I>>(base?: I): SourceReference {
    return SourceReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceReference>, I>>(object: I): SourceReference {
    const message = createBaseSourceReference();
    message.system = object.system ?? "";
    message.systemVersion = object.systemVersion ?? "";
    message.connectionId = object.connectionId ?? "";
    message.documentId = object.documentId ?? "";
    message.documentVersion = object.documentVersion ?? "";
    message.documentPath = object.documentPath ?? undefined;
    message.documentName = object.documentName ?? undefined;
    return message;
  },
};

function createBaseChunkReference(): ChunkReference {
  return { chunkingVersion: "", chunkId: "", chunkHash: "" };
}

export const ChunkReference: MessageFns<ChunkReference> = {
  encode(message: ChunkReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkingVersion !== "") {
      writer.uint32(10).string(message.chunkingVersion);
    }
    if (message.chunkId !== "") {
      writer.uint32(18).string(message.chunkId);
    }
    if (message.chunkHash !== "") {
      writer.uint32(26).string(message.chunkHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChunkReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunkReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunkingVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunkId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chunkHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChunkReference {
    return {
      chunkingVersion: isSet(object.chunkingVersion) ? globalThis.String(object.chunkingVersion) : "",
      chunkId: isSet(object.chunkId) ? globalThis.String(object.chunkId) : "",
      chunkHash: isSet(object.chunkHash) ? globalThis.String(object.chunkHash) : "",
    };
  },

  toJSON(message: ChunkReference): unknown {
    const obj: any = {};
    if (message.chunkingVersion !== "") {
      obj.chunkingVersion = message.chunkingVersion;
    }
    if (message.chunkId !== "") {
      obj.chunkId = message.chunkId;
    }
    if (message.chunkHash !== "") {
      obj.chunkHash = message.chunkHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChunkReference>, I>>(base?: I): ChunkReference {
    return ChunkReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChunkReference>, I>>(object: I): ChunkReference {
    const message = createBaseChunkReference();
    message.chunkingVersion = object.chunkingVersion ?? "";
    message.chunkId = object.chunkId ?? "";
    message.chunkHash = object.chunkHash ?? "";
    return message;
  },
};

function createBaseRelevantChunk(): RelevantChunk {
  return { source: undefined, chunk: undefined, relevance: undefined, chunkBody: "", documentMetadata: undefined };
}

export const RelevantChunk: MessageFns<RelevantChunk> = {
  encode(message: RelevantChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      SourceReference.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.chunk !== undefined) {
      ChunkReference.encode(message.chunk, writer.uint32(18).fork()).join();
    }
    if (message.relevance !== undefined) {
      RelevantChunk_Relevance.encode(message.relevance, writer.uint32(26).fork()).join();
    }
    if (message.chunkBody !== "") {
      writer.uint32(34).string(message.chunkBody);
    }
    if (message.documentMetadata !== undefined) {
      ChunkMetadata.encode(message.documentMetadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelevantChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelevantChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = SourceReference.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunk = ChunkReference.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relevance = RelevantChunk_Relevance.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chunkBody = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.documentMetadata = ChunkMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelevantChunk {
    return {
      source: isSet(object.source) ? SourceReference.fromJSON(object.source) : undefined,
      chunk: isSet(object.chunk) ? ChunkReference.fromJSON(object.chunk) : undefined,
      relevance: isSet(object.relevance) ? RelevantChunk_Relevance.fromJSON(object.relevance) : undefined,
      chunkBody: isSet(object.chunkBody) ? globalThis.String(object.chunkBody) : "",
      documentMetadata: isSet(object.documentMetadata) ? ChunkMetadata.fromJSON(object.documentMetadata) : undefined,
    };
  },

  toJSON(message: RelevantChunk): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = SourceReference.toJSON(message.source);
    }
    if (message.chunk !== undefined) {
      obj.chunk = ChunkReference.toJSON(message.chunk);
    }
    if (message.relevance !== undefined) {
      obj.relevance = RelevantChunk_Relevance.toJSON(message.relevance);
    }
    if (message.chunkBody !== "") {
      obj.chunkBody = message.chunkBody;
    }
    if (message.documentMetadata !== undefined) {
      obj.documentMetadata = ChunkMetadata.toJSON(message.documentMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelevantChunk>, I>>(base?: I): RelevantChunk {
    return RelevantChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelevantChunk>, I>>(object: I): RelevantChunk {
    const message = createBaseRelevantChunk();
    message.source = (object.source !== undefined && object.source !== null)
      ? SourceReference.fromPartial(object.source)
      : undefined;
    message.chunk = (object.chunk !== undefined && object.chunk !== null)
      ? ChunkReference.fromPartial(object.chunk)
      : undefined;
    message.relevance = (object.relevance !== undefined && object.relevance !== null)
      ? RelevantChunk_Relevance.fromPartial(object.relevance)
      : undefined;
    message.chunkBody = object.chunkBody ?? "";
    message.documentMetadata = (object.documentMetadata !== undefined && object.documentMetadata !== null)
      ? ChunkMetadata.fromPartial(object.documentMetadata)
      : undefined;
    return message;
  },
};

function createBaseRelevantChunk_Relevance(): RelevantChunk_Relevance {
  return { similarityScore: 0 };
}

export const RelevantChunk_Relevance: MessageFns<RelevantChunk_Relevance> = {
  encode(message: RelevantChunk_Relevance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.similarityScore !== 0) {
      writer.uint32(13).float(message.similarityScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelevantChunk_Relevance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelevantChunk_Relevance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.similarityScore = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelevantChunk_Relevance {
    return { similarityScore: isSet(object.similarityScore) ? globalThis.Number(object.similarityScore) : 0 };
  },

  toJSON(message: RelevantChunk_Relevance): unknown {
    const obj: any = {};
    if (message.similarityScore !== 0) {
      obj.similarityScore = message.similarityScore;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelevantChunk_Relevance>, I>>(base?: I): RelevantChunk_Relevance {
    return RelevantChunk_Relevance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelevantChunk_Relevance>, I>>(object: I): RelevantChunk_Relevance {
    const message = createBaseRelevantChunk_Relevance();
    message.similarityScore = object.similarityScore ?? 0;
    return message;
  },
};

function createBaseChunk(): Chunk {
  return { source: undefined, chunk: undefined, chunkBody: "", documentMetadata: undefined };
}

export const Chunk: MessageFns<Chunk> = {
  encode(message: Chunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      SourceReference.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.chunk !== undefined) {
      ChunkReference.encode(message.chunk, writer.uint32(18).fork()).join();
    }
    if (message.chunkBody !== "") {
      writer.uint32(26).string(message.chunkBody);
    }
    if (message.documentMetadata !== undefined) {
      ChunkMetadata.encode(message.documentMetadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Chunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = SourceReference.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunk = ChunkReference.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chunkBody = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.documentMetadata = ChunkMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chunk {
    return {
      source: isSet(object.source) ? SourceReference.fromJSON(object.source) : undefined,
      chunk: isSet(object.chunk) ? ChunkReference.fromJSON(object.chunk) : undefined,
      chunkBody: isSet(object.chunkBody) ? globalThis.String(object.chunkBody) : "",
      documentMetadata: isSet(object.documentMetadata) ? ChunkMetadata.fromJSON(object.documentMetadata) : undefined,
    };
  },

  toJSON(message: Chunk): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = SourceReference.toJSON(message.source);
    }
    if (message.chunk !== undefined) {
      obj.chunk = ChunkReference.toJSON(message.chunk);
    }
    if (message.chunkBody !== "") {
      obj.chunkBody = message.chunkBody;
    }
    if (message.documentMetadata !== undefined) {
      obj.documentMetadata = ChunkMetadata.toJSON(message.documentMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Chunk>, I>>(base?: I): Chunk {
    return Chunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Chunk>, I>>(object: I): Chunk {
    const message = createBaseChunk();
    message.source = (object.source !== undefined && object.source !== null)
      ? SourceReference.fromPartial(object.source)
      : undefined;
    message.chunk = (object.chunk !== undefined && object.chunk !== null)
      ? ChunkReference.fromPartial(object.chunk)
      : undefined;
    message.chunkBody = object.chunkBody ?? "";
    message.documentMetadata = (object.documentMetadata !== undefined && object.documentMetadata !== null)
      ? ChunkMetadata.fromPartial(object.documentMetadata)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
