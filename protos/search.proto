syntax = "proto3";

package redactive.grpc.v2;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "chunks.proto";

service Search {
    // Query the index for relevant chunks
    rpc SearchChunks(SearchChunksRequest) returns (SearchChunksResponse);
    // Query the index for all chunks of a specific document
    rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
}

message Query {
    // Search query for semantic content
    optional string semantic_query = 1;
    // Specific keywords to search for in source document
    optional string keyword_query = 2;
}

message TimeSpan {
    optional google.protobuf.Timestamp after = 1;
    optional google.protobuf.Timestamp before = 2;
}

message Filters {
    // Scope of the query. This may either be the name of a fetcher, or a subspace of documents.
    // Subspaces take the form of <provider>://<tenancy>/<path>
    // e.g. for Confluence: 'confluence://redactiveai.atlassian.net/Engineering/Engineering Onboarding Guide'
    // for Sharepoint: 'sharepoint://redactiveai.sharepoint.com/Shared Documents/Engineering/Onboarding Guide.pdf'
    repeated string scope = 1;
    // Timespan of response chunk's creation
    optional TimeSpan created = 2;
    // Timespan of response chunk's last modification
    optional TimeSpan modified = 3;
    // List of user emails associated with response chunk
    repeated string user_emails = 4;
    // Include content from documents in trash
    optional bool include_content_in_trash = 5;
}

message SearchChunksRequest {
    // How many results to try to return (maximum number of results)
    optional uint32 count = 1;
    // The query to execute
    Query query = 2;
    // Filters to apply to query
    optional Filters filters = 3;
}

message GetDocumentRequest {
   // A reference to the document to retrieve
   string ref = 1;
   // Query filters (only really for GetDocByTitle)
   optional Filters filters = 2;
}

message SearchChunksResponse {
    // Query was successful
    bool success = 1;
    // Error message if query failed
    optional google.protobuf.Struct error = 2;
    // List of relevant chunks
    repeated RelevantChunk relevant_chunks = 3;
}

message GetDocumentResponse {
    // Query was successful
    bool success = 1;
    // Error message if query failed
    optional google.protobuf.Struct error = 2;
    // List of relevant chunks
    repeated Chunk chunks = 3;
}
